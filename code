#include <iostream>
#include <fstream>
#include <string>
#include <vector>

using namespace std;

struct Contact {
    string name;
    string phoneNumber;
    string email;
};

vector<Contact> contacts;

void saveContactsToFile() {
    ofstream file("contacts.txt");
    if (file.is_open()) {
        for (const auto& contact : contacts) {
            file << contact.name << "," << contact.phoneNumber << "," << contact.email << endl;
        }
        file.close();
        cout << "Contacts saved to file." << endl;
    } else {
        cout << "Unable to open file." << endl;
    }
}

void loadContactsFromFile() {
    ifstream file("contacts.txt");
    if (file.is_open()) {
        string line;
        while (getline(file, line)) {
            Contact contact;
            size_t pos = line.find(",");
            contact.name = line.substr(0, pos);
            line.erase(0, pos + 1);
            pos = line.find(",");
            contact.phoneNumber = line.substr(0, pos);
            line.erase(0, pos + 1);
            contact.email = line;
            contacts.push_back(contact);
        }
        file.close();
        cout << "Contacts loaded from file." << endl;
    } else {
        cout << "No contacts file found. Starting with an empty contact list." << endl;
    }
}

void addContact() {
    Contact contact;
    cout << "Enter name: ";
    getline(cin, contact.name);
    cout << "Enter phone number: ";
    getline(cin, contact.phoneNumber);
    cout << "Enter email address: ";
    getline(cin, contact.email);
    contacts.push_back(contact);
    cout << "Contact added successfully." << endl;
}

void viewContacts() {
    if (contacts.empty()) {
        cout << "No contacts to display." << endl;
    } else {
        cout << "Contacts:" << endl;
        for (const auto& contact : contacts) {
            cout << "Name: " << contact.name << ", Phone: " << contact.phoneNumber << ", Email: " << contact.email << endl;
        }
    }
}

void editContact() {
    if (contacts.empty()) {
        cout << "No contacts to edit." << endl;
    } else {
        viewContacts();
        cout << "Enter the index of the contact you want to edit: ";
        int index;
        cin >> index;
        cin.ignore(); // Clear input buffer
        if (index >= 0 && index < contacts.size()) {
            Contact& contact = contacts[index];
            cout << "Enter new name (leave blank to keep current): ";
            string newName;
            getline(cin, newName);
            if (!newName.empty()) {
                contact.name = newName;
            }
            cout << "Enter new phone number (leave blank to keep current): ";
            string newPhoneNumber;
            getline(cin, newPhoneNumber);
            if (!newPhoneNumber.empty()) {
                contact.phoneNumber = newPhoneNumber;
            }
            cout << "Enter new email address (leave blank to keep current): ";
            string newEmail;
            getline(cin, newEmail);
            if (!newEmail.empty()) {
                contact.email = newEmail;
            }
            cout << "Contact edited successfully." << endl;
        } else {
            cout << "Invalid index." << endl;
        }
    }
}

void deleteContact() {
    if (contacts.empty()) {
        cout << "No contacts to delete." << endl;
    } else {
        viewContacts();
        cout << "Enter the index of the contact you want to delete: ";
        int index;
        cin >> index;
        cin.ignore(); // Clear input buffer
        if (index >= 0 && index < contacts.size()) {
            contacts.erase(contacts.begin() + index);
            cout << "Contact deleted successfully." << endl;
        } else {
            cout << "Invalid index." << endl;
        }
    }
}

int main() {
    loadContactsFromFile();
    int choice;
    do {
        cout << "Menu:\n1. Add Contact\n2. View Contacts\n3. Edit Contact\n4. Delete Contact\n5. Save Contacts\n6. Exit\nEnter your choice: ";
        cin >> choice;
        cin.ignore(); // Clear input buffer
        switch (choice) {
            case 1:
                addContact();
                break;
            case 2:
                viewContacts();
                break;
            case 3:
                editContact();
                break;
            case 4:
                deleteContact();
                break;
            case 5:
                saveContactsToFile();
                break;
            case 6:
                saveContactsToFile();
                cout << "Exiting program." << endl;
                break;
            default:
                cout << "Invalid choice. Please try again." << endl;
                break;
        }
    } while (choice != 6);
    return 0;
}
